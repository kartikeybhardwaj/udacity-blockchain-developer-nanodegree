pragma solidity >= 0.4 .24;

import "../accesscontrol/ConsumerRole.sol";
import "../accesscontrol/SellerRole.sol";
import "../accesscontrol/TransporterRole.sol";
import "../core/Ownable.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, SellerRole, TransporterRole, ConsumerRole {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping(uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping(uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State {
    Printed, // 0
    Purchased, // 1
    Shipped, // 2
    Received // 3
  }

  State constant defaultState = State.Printed;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint sku; // Stock Keeping Unit (SKU)
    uint upc; // Universal Product Code (UPC), generated by the Seller, goes on the package, can be verified by the Consumer
    address originSellerID; // Metamask-Ethereum address of the Seller
    string originSellerName; // Seller Name
    uint productID; // Product ID potentially a combination of upc + sku
    string productNotes; // Product Notes
    uint productPrice; // Product Price
    State itemState; // Product State as represented in the enum above
    address transporterID; // Metamask-Ethereum address of the Transporter
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 4 events with the same 4 state values and accept 'upc' as input argument
  event Printed(uint upc);
  event Purchased(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifySeller(uint _upc) {
    require(msg.sender == items[_upc].originSellerID);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyConsumer(uint _upc) {
    require(msg.sender == items[_upc].consumerID);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Printed
  modifier printed(uint _upc) {
    require(items[_upc].itemState == State.Printed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      address payable ownerAddressPayable = _make_payable(owner);
      selfdestruct(ownerAddressPayable);
    }
  }

  // Function that allows you to convert an address into a payable address
  function _make_payable(address x) internal pure returns(address payable) {
    return address(uint160(x));
  }

  // Define a function 'printItem' that allows a seller to mark an item 'Printed'
  function printItem(uint _upc, string memory _originSellerName, string memory _productNotes, uint _price) public
  // call modifier to check if user is seller
  onlySeller() {
    // Add the new item as part of Print
    items[_upc] = Item(
      sku,
      _upc,
      msg.sender,
      _originSellerName,
      sku + _upc,
      _productNotes,
      _price,
      State.Printed,
      address(0),
      address(0)
    );
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Printed(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is printed
  function purchaseItem(uint _upc) public payable
  // Call modifier to check if upc has passed previous supply chain stage
  printed(_upc) {
    uint itemPrice = items[_upc].productPrice;
    address ownerAddress = items[_upc].originSellerID;
    require(msg.value >= itemPrice, "You need to have enough Ether");
    address payable ownerAddressPayable = _make_payable(ownerAddress);
    ownerAddressPayable.transfer(itemPrice);
    if (msg.value > itemPrice) {
      msg.sender.transfer(msg.value - itemPrice);
    }
    // Update the appropriate fields - consumerID, itemState
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'shipItem' that allows a seller to mark an item 'Shipped'
  function shipItem(uint _upc, address _transporterID) public
  // call modifier to check if user is seller
  onlySeller()
  // Call modifier to check if upc has passed previous supply chain stage
  purchased(_upc)
  // Call modifier to verify caller of this function
  verifySeller(_upc) {
    // Update the appropriate fields
    items[_upc].transporterID = _transporterID;
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows a consumer to mark an item 'Received'
  function receiveItem(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  shipped(_upc)
  // Call modifier to verify caller of this function
  verifyConsumer(_upc) {
    // Update the appropriate fields
    items[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
  }

  function fetchItemPrintDetails(uint _upc) public view returns
    (
      uint itemUPC,
      address itemOriginSellerID,
      string memory itemOriginSellerName,
      string memory itemProductNotes,
      uint itemProductPrice
    ) {
      itemUPC = items[_upc].upc;
      itemOriginSellerID = items[_upc].originSellerID;
      itemOriginSellerName = items[_upc].originSellerName;
      itemProductNotes = items[_upc].productNotes;
      itemProductPrice = items[_upc].productPrice;
      return (
        itemUPC,
        itemOriginSellerID,
        itemOriginSellerName,
        itemProductNotes,
        itemProductPrice
      );
    }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
    (
      uint itemSKU,
      uint itemUPC,
      address itemOriginSellerID,
      string memory itemOriginSellerName
    ) {
      // Assign values to the 4 parameters
      itemSKU = items[_upc].sku;
      itemUPC = items[_upc].upc;
      itemOriginSellerID = items[_upc].originSellerID;
      itemOriginSellerName = items[_upc].originSellerName;
      return (
        itemSKU,
        itemUPC,
        itemOriginSellerID,
        itemOriginSellerName
      );
    }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
    (
      uint itemSKU,
      uint itemUPC,
      uint itemProductID,
      string memory itemProductNotes,
      uint itemProductPrice,
      State itemState,
      address itemTransporterID,
      address itemConsumerID
    ) {
      // Assign values to the 8 parameters
      itemSKU = items[_upc].sku;
      itemUPC = items[_upc].upc;
      itemProductID = items[_upc].productID;
      itemProductNotes = items[_upc].productNotes;
      itemProductPrice = items[_upc].productPrice;
      itemState = items[_upc].itemState;
      itemTransporterID = items[_upc].transporterID;
      itemConsumerID = items[_upc].consumerID;
      return (
        itemSKU,
        itemUPC,
        itemProductID,
        itemProductNotes,
        itemProductPrice,
        itemState,
        itemTransporterID,
        itemConsumerID
      );
    }
}